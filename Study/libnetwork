(1)备注:
(1.1)工作执行流简介:
    1>指定network的驱动和各项相关参数之后调用libnetwork.New()创建一个NetWorkController实例。这个实例提供了各种接口，Docker可以通过它创建新的NetWork和
Sandbox等；
    2>通过controller.NewNetwork(networkType, “network1”)来创建指定类型和名称的Network；
    3>通过network.CreateEndpoint（”Endpoint1”）来创建一个Endpoint。在这个函数中Docker为这个Endpoint分配了ip和接口，而对应的network实例中的各项配置信
息则会被使用到Endpoint中，其中包括iptables的配置规则和端口信息等；
    4>通过调用controller.NewSandbox()来创建Sandbox。这个函数主要调用了namespace和cgroup等来创建一个相对独立的沙盒空间;
    5>调用ep.Join(sbx)将Endpoint加入指定的Sandbox中，则这个Sandbox也会加入创建Endpoint对应的Network中。

(1.2)Docker使用libnetwork内置驱动的执行流详解:
    介绍Docker使用libnetwork内置驱动的执行流之前，我们先来看一下Dorker的默认网络模式（bridge模式）中，各个设备和容器之间的关系。其简要关系如图
    bridge模式中各个设备与容器关系.png。
上图中container1和container2是两个Docker容器，veth0和veth1，veth2和veth3是两对veth pair（veth pair可以用于不同netns之间的通信），docker0是网桥（docker0可以
连接不同的网络），eth0是宿主机的物理网卡。
    图中的container1和container2都拥有不同的netns。以container1为例，veth pair中的veth0被加入到container1的netns中，并且被配置ip地址等基本信息，则veth0就成
为了container1的一块网卡，与veth0所对应的的veth1被连接到docker0网桥上。Docker0网桥上还连接了宿主机的物理网卡eth0。这样container1就可以利用veth0与Internet进
行通信。类似的container2也连接到了docker0网桥上，显然container1与container2之间也是可以进行通信的。
    结合上面提到的CNM中的概念，可以知道docker0网桥就是CNM中的network组件，它可以代表一个网络。Container所拥有的netns就是CNM中的一个sandbox，它是一个独立的
网络栈。Veth pair则是CNM中的endpoint，它的一个端点可以通过加入一个网桥来加入一个network，另一个端点可以加入一个sandbox，这样就将这个sandbox所对应的容器加入
到了这个network中。
    在了解了各个设备和容器之间的关系和各种设备和CNM各种组件的对应关系后，来看一下Docker是如何与libnetwork和libcontainer进行协作交互，并且为各个容器创建和配
置网络的。Docker中使用默认模式（bridge模式）为容器创建和配置网络的过程如图所示。
    1>在Docker daemon启动的时候，daemon会创建一个bridge驱动所对应的netcontroller，这个controller可以在后面的流程里面对network和sandbox等进行创建。
    2>接下来daemon通过调用controller.NewNetwork（）来创建指定类型（bridge类型）和指定名称（即docker0）的network。Libnetwork在接收到创建命令后会使用系统linux
    的系统调用，创建一个名为docker0的网桥。我们可以在Docker daemon启动后，使用ifconfig命令看到这个名为docker0的网桥。
    3>在Docker daemon成功启动后，我们就可以使用Docker Client进行容器创建了。容器的网络栈会在容器真正启动之前完成创建。在为容器创建网络栈的时候，首先会取得
    daemon中的netController，其值就是libnetwork中的向外提供的一组接口，即NetworkController。
    接下来，Docker会调用BuildCreateEndpointOptions（）来创建此容器中endpoint的配置信息。然后再调用CreateEndpoint（）使用上面配置好的信息创建对应的endpoint。
    在bridge模式中，libnetwork创建的设备是veth pair。Libnetwork中调用netlink.LinkAdd(veth)进行了veth pair的创建，得到的一个veth设备是为了host所准备的，另一个
    是为了sandbox所准备的。将host端的veth加入到网桥（docker0）中。然后调用netlink.LinkSetUp(host)，启动主机端的veth。最后对endpoint中的端口映射进行配置。
    从本质上来讲，这一部分所做的工作就是调用linux系统调用，进行veth pair的创建。然后将veth pair的一端，作为docker0网桥的一个接口加入到这个网桥中。
    4>创建SandboxOptions，然后调用controller.NewSandbox()来创建属于此container的新的sandbox。在接收到Docker创建sandbox的请求后，libnetwork会使用系统调用为容器
    创建一个新的netns，并将这个netns的路径返回给Docker。
    5>调用ep.Join(sb)将endpoint加入到容器对应的sandbox中。先将endpoint加入到容器对应的sandbox中，然后对endpoint的ip信息和gateway等信息进行配置。
    6>Docker在调用libcontainer来启动容器之后，libcontainer会在容器中的init进程初始化容器坏境的时候，将容器中的所有进程都加入到4中得到的netns中。这样容器就拥有
    了属于自己独立的网络栈，进而完成了网络部分的创建和配置工作。

(1.3)libnetwork在docker daemon初始化时的工作:
    在daemon初始化时，libnetwork的工作主要有两个：
    1>在Docker daemon启动的时候，daemon会创建一个bridge驱动所对应的netcontroller，这个controller可以在后面的流程里面对network和sandbox等进行创建;
    2>接下来daemon通过调用controller.NewNetwork()来创建指定类型（bridge类型）和指定名称（即docker0）的network。Libnetwork在接收到创建命令后会使用
系统linux的系统调用，创建一个名为docker0的网桥。我们可以在Docker daemon启动后，使用ifconfig命令看到这个名为docker0的网桥。
(1.4)代码分析:
    1>components/engine/cmd/dockerd/docker.go:main() -> newDaemonCommand() -> runDaemon() ->
    components/engine/cmd/dockerd/daemon.go:start() ->
    components/engine/daemon/daemon.go:NewDaemonCli() -> restore() -> initNetworkController()

(1.5)